name: Docker Build, Push & Deploy

on:  # 트리거 언제 실행 시킬지
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:  # 시킬 일
  build-and-push:  # 도커 이미지 빌드 및 푸시
    runs-on: ubuntu-latest  # 깃허브가 제공한 우분투 서버에서 실행

    steps:
      - name: Checkout repository  # 레포지토리 확인
        uses: actions/checkout@v4

      - name: Set up Docker Buildx  # 도커에 접근
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub  # 도커 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # 도커 아이디
          password: ${{ secrets.DOCKER_PASSWORD }}  # 도커 비밀번호

      - name: Build and push Docker image  # 도커 이미지 빌드 후 푸시
        uses: docker/build-push-action@v5
        with:
          context: .  # Docker가 빌드할 작업 디렉토리 설정 .은 현재 디렉토리
          push: true  # Docker Hub에 푸시할 지 여부
          platforms: linux/amd64  # ubuntu 64비트 리눅스용 아키텍쳐 설정
          tags: augustzer0/capstone-fastapi:latest  # 만들어질 도커 이미지의 이름

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # build-and-push 완료 후 실행됨

    steps:
      - name: Log in to Docker Hub  # 도커 허브에 로그인 및 접속
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to AWS EC2  # AWS EC2 SSH에 접근하여 도커 이미지 Pull 및 자동으로 재시작
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}  # HOST IP 주소
          username: ${{ secrets.SSH_USER }} # HOST 이름 ubuntu의 경우 ubuntu 입력
          key: ${{ secrets.SSH_KEY }}  # SSH_PRIVATE KEY 전부 입력 ----BEGIN 부터 END --- 까지 다 포함
          script: |
            cd ~/capstone  # EC2의 프로젝트 폴더로 이동
            docker compose pull app # 최신 Docker 이미지 pull
            docker compose up -d --force-recreate app # 컨테이너 재시작
